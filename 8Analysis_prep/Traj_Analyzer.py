import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np

sns.set(font_scale=2) 
sns.set_style("ticks")


def score(basepath, subpath, csv_name):
    '''
    Calculate the stability score of each simulation trajectory and save each score into a .csv file

    Parameters
    ----------
    basepath : str
        The basepath of source file
    
    subpath : str
        The subpath of source file (contacts_pair.dat)
    
    csv_name : str
        The path to the output file (.csv)
    
    '''
    score_list = []                                # The list of the stability score of each trajectory
    for i in range(1,4):
        score_df = pd.read_csv(basepath+subpath%(i), delim_whitespace=True, skiprows=2)
        score = score_df['Frac.'].mean()           # Calculate the score
        score_list.append(score)
        print('Simulation %s score: '%(i),score)

    print()
    print("Total average score is ",np.mean(score_list))
    
    score_df = pd.DataFrame({'Score':score_list})  # Dataframe for native contact score for all 3 trajectories
    score_df.to_csv(csv_name, index=False)         # Save each score to csv_name


def rmsdPlot(basepath, rec_subpath, lig_subpath, title_name, fig_name, rec_name, lig_name):
    '''
    Plot the rmsd changes of the receptor and ligand of each trajectory, and save the plot as a .png file
    
    Parameters
    ----------
    basepath : str
        The basepath of source file
    
    rec_subpath : str
        The subpath of source file (.rms files) of the receptor
    
    lig_subpath : str
        The subpath of source file (.rms files) of the ligand
    
    title_name : str
        The title of the figure

    fig_name : str
        The path to the output file (.png)
    
    rec_name : str
        The name of the receptor

    lig_name : str
        The name of the ligand
    
    '''
    plt.figure(figsize=(30, 8))    
    for i in range(1,4):
        plt.subplot(1,3,i)                                                           # The ith subplot          
        receptor = pd.read_csv(basepath+rec_subpath%(i,i), delim_whitespace=True)
        ligand = pd.read_csv(basepath+lig_subpath%(i,i), delim_whitespace=True)
        RMSD_receptor = receptor['RMSD_00002']                                       # Dataframe of receptor data
        RMSD_ligand = ligand['RMSD_00002']                                           # Dataframe of ligand data
        
        # PLOT 
        plt.plot(range(len(RMSD_receptor)),RMSD_receptor,label=rec_name)
        plt.plot(range(len(RMSD_ligand)),RMSD_ligand,label=lig_name)
        
        # LEGEND & TITLE & ETC. 
        plt.legend()
        plt.title(title_name+'%s'%i)
        plt.ylabel('RMSD')
        plt.xlabel('time/ns')
        
    plt.savefig(fig_name,bbox_inches='tight',transparent=True)                       # Save figure to fig_name


def energySample(basepath, subpath, csv_name, sim_list, col, text, n_size):
    '''
    Sample the data points of MMPBSA, and save sampled points to a .csv file
    
    Parameters
    ----------
    basepath : str
        The basepath of source file
    
    subpath : str
        The subpath of source file (.csv file generated by MMPBSA run)
    
    csv_name : str
        The path to the output file (.csv)
    
    sim_list : int[]
        The list of trajectory indices t be analyzed (based on score)

    col : str
        The colume to be analyzed (either 'DELTA TOTAL' or 'VDWAALS')
    
    text : str
        The text to be printed ("energy (parameter set 1)", "energy (parameter set 2)", or "Van der Waals energy")
    
    n_size : int
        Sample size in each trajectory
    
    '''
    sim_all = pd.DataFrame()                       # Dataframe for raw energy data
    
    for i in sim_list:
        sim = pd.read_csv(basepath+subpath%(i,i), skiprows=464)
        cavg = sim[col].expanding().mean().to_frame()
        print('The cumulative average '+text+' of sim %s'%(i),cavg.iloc[150])
        
        sim_equil = sim[col].iloc[51:151]                                   # Dataframe for equilibrated data points
        sim_sample = sim_equil.sample(n=n_size, replace = False).to_frame() # Random sample from equilibrated data points
        sim_all=sim_all.append(sim_sample, ignore_index=True)
    
    sim_all.to_csv(csv_name,index=False)                                    # Save sampled data points to csv_name


def energyPlot(basepath, subpath, title_name, y_label, fig_name):
    '''
    Plot the energy change of each trajectory, including individual data points and cumulative 
    average data points, and save the plot as a .png file
    
    Parameters
    ----------
    basepath : str
        The basepath of source file
    
    subpath : str
        The subpath of source file (.csv file generated by MMPBSA run)
    
    title_name : str
        The title of the figure

    y_label : str
        The label of y axes

    fig_name : str
        The path to the output file (.png)
    
    '''
    plt.figure(figsize=(24, 8),dpi=150)
    color_list = ['dum','r','g','b']
    for i in range(1, 4):
        sim = pd.read_csv(basepath+subpath%(i,i),skiprows=464)
        sim_total = sim['DELTA TOTAL']                            # Dataframe of individual data points
        cavg = sim['DELTA TOTAL'].expanding().mean()              # Dataframe of cumulative average data points
        
        # PLOT 
        plt.plot(np.array(range(len(cavg)))+50,cavg,label='Sim %s'%i,color=color_list[i],linewidth=2)
        plt.plot(np.array(range(len(sim_total)))+50,sim_total,'.',label='Sim %s'%i,color=color_list[i])
        
        # LEGEND & TITLE & ETC. 
        plt.legend()
        plt.title(title_name)
        plt.ylabel(y_label)
        plt.xlabel('Time (ns)')
    
    plt.savefig(fig_name,bbox_inches='tight',transparent=True)